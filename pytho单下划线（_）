Python中下划线的使用方法

单下划线（_）
通常情况下，会在以下3种场景中使用:

1、在解释器中：在这种情况下，“_”代表交互式解释器会话中上一条执行的语句的结果。这种用法首先被标准CPython解释器采用，然后其他类型的解释器也先后采用。
>>> _ Traceback (most recent call last):
File "<stdin>", line 1, in <module>
NameError: name '_' is not defined
>>> 42
>>> _
42
>>> 'alright!' if _ else ':('
'alright!'
>>> _
'alright!'

2、作为一个名称：这与上面一点稍微有些联系，此时“_”作为临时性的名称使用。
这样，当其他人阅读你的代码时将会知道，你分配了一个特定的名称，但是并不会在后面再次用到该名称。
例如，下面的例子中，你可能对循环计数中的实际值并不感兴趣，此时就可以使用“_”。
n = 42
for _ in range(n): 
    do_something()

3、国际化：也许你也曾看到”_“会被作为一个函数来使用。
这种情况下，它通常用于实现国际化和本地化字符串之间翻译查找的函数名称，这似乎源自并遵循相应的C约定。
例如，在Django文档“转换”章节中，你将能看到如下代码：
from django.utils.translation import ugettext as _
from django.http import HttpResponse
def my_view(request): 
    output = _("Welcome to my site.") 
    return HttpResponse(output)
可以发现，场景二和场景三中的使用方法可能会相互冲突，所以我们需要避免在使用“_”作为国际化查找转换功能的代码块中同时使用“_”作为临时名称。
